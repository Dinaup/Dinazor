

@page "/scheduler"
@inject DialogService DialogService

    <RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="EventoEnAgendaC" Data=@appointments StartProperty="StartX" EndProperty="EndX"
        TextProperty="TextX" SelectedIndex="2"
        SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
        <RadzenDayView />
        <RadzenWeekView />
        <RadzenMonthView />
    </RadzenScheduler>


@code {
    RadzenScheduler<EventoEnAgendaC> scheduler;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    IList<EventoEnAgendaC> appointments = new List<EventoEnAgendaC>
    {

        
        new EventoEnAgendaC { StartX = DateTime.Today.AddDays(-2), EndX = DateTime.Today.AddDays(-2), TextX = "Birthday" },
        new EventoEnAgendaC { StartX = DateTime.Today.AddDays(-11), EndX = DateTime.Today.AddDays(-10), TextX = "Day off" },
        new EventoEnAgendaC { StartX = DateTime.Today.AddDays(-10), EndX = DateTime.Today.AddDays(-8), TextX = "Work from home" },
        new EventoEnAgendaC { StartX = DateTime.Today.AddHours(10), EndX = DateTime.Today.AddHours(12), TextX = "Online meeting" },
        new EventoEnAgendaC { StartX = DateTime.Today.AddHours(10), EndX = DateTime.Today.AddHours(13), TextX = "Skype call" },
        new EventoEnAgendaC { StartX = DateTime.Today.AddHours(14), EndX = DateTime.Today.AddHours(14).AddMinutes(30), TextX = "Dentist appointment" },
        new EventoEnAgendaC { StartX = DateTime.Today.AddDays(1), EndX = DateTime.Today.AddDays(12), TextX = "Vacation" }
    };

    void OnSlotRender(SchedulerSlotRenderEventArgs args) 
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        //console.Log($"SlotSelect: Start={args.Start} End={args.End}");

        //Appointment data = await DialogService.OpenAsync<AddAppointmentPage>("Add Appointment",
        //    new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

        //if (data != null)
        //{
        //    appointments.Add(data);
        //    // Either call the Reload method or reassign the Data property of the Scheduler
        //    await scheduler.Reload();
        //}
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<EventoEnAgendaC> args)
    {
        //console.Log($"AppointmentSelect: Appointment={args.Data.Text}");

        //await DialogService.OpenAsync<EditAppointmentPage>("Edit Appointment", new Dictionary<string, object> { { "Appointment", args.Data } });

        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<EventoEnAgendaC> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        //if (args.Data.Text == "Birthday")
        //{
        //    args.Attributes["style"] = "background: red";
        //}
    }
}