

@page "/MiAgenda"
@inject DialogService DialogService
@inherits DinaupPage

    <RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="EventoEnAgendaC" Data=@appointments StartProperty="StartX" EndProperty="EndX"
        TextProperty="TextX" SelectedIndex="2"
        SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
        <RadzenDayView />
        <RadzenWeekView />
        <RadzenMonthView />
    </RadzenScheduler>


@code {


    class EventoEnAgendaC{


        public DateTime StartX;
        public DateTime EndX;
        public String TextX;

       
    }


    RadzenScheduler<EventoEnAgendaC> scheduler;
    IList<EventoEnAgendaC> appointments = new List<EventoEnAgendaC>();



    protected override Task OnInitializedAsync()
    {

        var CreandoLista = new List<EventoEnAgendaC>();
	    

	    var temp = new MiDinaup.InformesD.FuncionalidadD.EventosDeAgendasC();

	    Task.Run(() => temp.ConsultarAsync( Dinaup_Sesion.DinaupUsuario , 1, 900)).Wait();

        

        if(temp.Filas.TieneDatos()){
          foreach (var item in temp.Filas )
          {

	          CreandoLista.Add(new EventoEnAgendaC { StartX = item.Desde.Value.ToLocalTime() , EndX = item.Hasta.Value.ToLocalTime() , TextX = item.Evento});

          }
        }

	    appointments = CreandoLista;
        return base.OnInitializedAsync();
    }





    void OnSlotRender(SchedulerSlotRenderEventArgs args) 
    {
        //// Highlight today in month view
        //if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        //{
        //    args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        //}

        //// Highlight working hours (9-18)
        //if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        //{
        //    args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        //}
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        //console.Log($"SlotSelect: Start={args.Start} End={args.End}");

        //Appointment data = await DialogService.OpenAsync<AddAppointmentPage>("Add Appointment",
        //    new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

        //if (data != null)
        //{
        //    appointments.Add(data);
        //    // Either call the Reload method or reassign the Data property of the Scheduler
        //    await scheduler.Reload();
        //}
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<EventoEnAgendaC> args)
    {
        //console.Log($"AppointmentSelect: Appointment={args.Data.Text}");

        //await DialogService.OpenAsync<EditAppointmentPage>("Edit Appointment", new Dictionary<string, object> { { "Appointment", args.Data } });

        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<EventoEnAgendaC> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        //if (args.Data.Text == "Birthday")
        //{
        //    args.Attributes["style"] = "background: red";
        //}
    }
}