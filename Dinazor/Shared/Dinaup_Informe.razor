@inject DinaupPage DinaPeticion
 





@if(Titulo != ""){
	<h1>@Titulo</h1>
}


@if(Comentario != ""){
	<p>@Comentario</p>
}
 




@if (DinaupInformeRespuesta?.Respuesta?.Listado?.Columnas == null )
{



}else if(ModoScrollInfinito) {

	<RadzenDataGrid   RowClick="@OnRowClick"   AllowColumnReorder="true" ColumnReordered="@OnColumnReordered"  Data="@data" Count="@count" LoadData="@LoadData" TItem="Dic<string, string>" AllowVirtualization="true" Style="height:400px"
				AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.And" FilterMode="FilterMode.SimpleWithMenu" 
				AllowSorting="true" AllowColumnPicking="@SelectorDeColumnasVisibles" AllowColumnResize="true" ColumnResized=@OnColumnResized>
		<Columns>


			@foreach (var item in DinaupInformeRespuesta.Respuesta.Listado.Columnas)
			{

				<RadzenDataGridColumn TItem="Dic<string, object>" Property="@item.KeyWord" Title="@item.Etiqueta" Type="@item.NetType">
					<Template>
						@context[item.KeyWord]
					</Template>
				</RadzenDataGridColumn>
			}

		</Columns>
	</RadzenDataGrid>

}
else
{

	<RadzenDataGrid  RowClick="@OnRowClick"  AllowColumnReorder="true" ColumnReordered="@OnColumnReordered" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.SimpleWithMenu" AllowPaging="true"
				AllowSorting="true" Data="@data" TItem="Dic<string, string>"
				IsLoading="@isLoading"  
				Count="@count" AllowColumnPicking="@SelectorDeColumnasVisibles" LoadData="@LoadData" LogicalFilterOperator="LogicalFilterOperator.And" AllowColumnResize="true" ColumnResized=@OnColumnResized>
		<Columns>
			
			

			@foreach (var item in DinaupInformeRespuesta.Respuesta.Listado.Columnas)
			{

	

				if (item.Es_ClavePrimaria_ID)
				{
					@if (URL_Ver == "" && URL_Editar == "" && PuedeEliminar == false)
					{
						continue;
					}
				}

				if (item.Formato == TipoCamposSQLServerE.Guid)
				{
					continue;
				}
				<RadzenDataGridColumn Filterable="!item.Es_ClavePrimaria_ID" Visible="@item.Visible" TItem="Dic<string, string>" Property="@item.KeyWord" Title="@item.Etiqueta" Type="@item.NetType">
					<Template>
						 

						
						@if (item.Predefinidos_Textos.TieneDatos())
						{

							var Icono = item.RecibirIcono(context[item.KeyWord].ToString());
							@if (Icono != "")
							{
								<img src="@Icono" width="24" height="24">
							}
							@item.RecibirLegible(context[item.KeyWord].ToString());


						}
						else if (item.Es_ClavePrimaria_ID)
						{

							@if (URL_Ver != "")
							{
								<RadzenButton ButtonStyle="ButtonStyle.Light" Icon="open_in_new" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(context))">
								</RadzenButton>
							}

							@if (URL_Editar != "")
							{
								<RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small" Class="m-1" Click="@(args => EditRow(context))" @onclick:stopPropagation="true">
								</RadzenButton>
							}

							@if (PuedeEliminar)
							{
								<RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(context))">
								</RadzenButton>
							}

						}
						else
						{

						
						
							var KeyFoto =   item.KeyWord + "Foto";
							var KeyFoto2 =  item.KeyWord + "Icono";

							if (  !string.IsNullOrEmpty(context.get_HacerMagia(KeyFoto,"")) )
							{

								var DetallesArchivo = DinaupInformeRespuesta.Respuesta.Listado.Archivos.get_HacerMagia(context[KeyFoto]);
								var URl = DinaPeticion.ControladorDeArchivos.FirmarURL_Archivo(DetallesArchivo);

								<RadzenImage Path="@URl" style="width: 32px; height: 32px; border-radius: 16px; margin-right: 6px;" />

							}else if (!string.IsNullOrEmpty(context.get_HacerMagia(KeyFoto2,null) )  ){

								var DetallesArchivo = DinaupInformeRespuesta.Respuesta.Listado.Archivos.get_HacerMagia(context[KeyFoto2]);
								var URl = DinaPeticion.ControladorDeArchivos.FirmarURL_Archivo(DetallesArchivo);
								<RadzenImage Path="@URl" style="width: 32px; height: 32px; border-radius: 16px; margin-right: 6px;" />



							}
							@context[item.KeyWord]

						}



					</Template>
				</RadzenDataGridColumn>
			}

		</Columns>
	</RadzenDataGrid>

}



@code {



	

	[Parameter]
	public EventCallback<DataGridRowMouseEventArgs<Dic<string, string>>> ClickFila{ get; set; }


	IEnumerable<Dic<string, string>> data;


	int count;
	int countActual;
	bool isLoading;


	void Actualizar_Paginas()
	{

	}


	async Task LoadData(LoadDataArgs args)
	{

		isLoading = true;
		Utilidades.AplicarConfiguracionDeCargaAInforme(args, DinaupInformeRespuesta);
		await DinaupInformeRespuesta.ActualizarDatos_Async();
		data = DinaupInformeRespuesta.Respuesta.Listado.FilasEnDic();
		count = DinaupInformeRespuesta.Respuesta.Listado.Totalresultados;
		isLoading = false;



		 
	

	}

	
	void OnRowClick(DataGridRowMouseEventArgs<Dic<string, string>> Evento)
	{

		ClickFila.InvokeAsync(Evento);

	}



	void OnColumnResized(DataGridColumnResizedEventArgs<Dic<string, string>> args)
	{
	}
	  
	
	
	void OnColumnReordered(DataGridColumnReorderedEventArgs<Dic<string, string>> args)
    {
        //console.Log($"Reordered {args.Column.Title}. Old index: {args.OldIndex}, New index: {args.NewIndex}");
    }
	
    async Task EditRow(Dic<string, string> order)
    {
        //await ordersGrid.EditRow(order);
    }

    void OnUpdateRow(Dic<string, string> order)
    {
        //if (order == orderToInsert)
        //{
        //    orderToInsert = null;
        //}

        //dbContext.Update(order);

        // For demo purposes only
        //order.Customer = dbContext.Customers.Find(order.CustomerID);
        //order.Employee = dbContext.Employees.Find(order.EmployeeID);

        // For production
        //dbContext.SaveChanges();
    }

    async Task SaveRow(Dic<string, string> order)
    {
        //if (order == orderToInsert)
        //{
        //    orderToInsert = null;
        //}

        //await ordersGrid.UpdateRow(order);
    }

    void CancelEdit(Dic<string, string> order)
    {
        //if (order == orderToInsert)
        //{
        //    orderToInsert = null;
        //}

        //ordersGrid.CancelEditRow(order);

        //// For production
        //var orderEntry = dbContext.Entry(order);
        //if (orderEntry.State == EntityState.Modified)
        //{
        //    orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
        //    orderEntry.State = EntityState.Unchanged;
        //}
    }

    async Task DeleteRow(Dic<string, string> order)
    {
        //if (order == orderToInsert)
        //{
        //    orderToInsert = null;
        //}

        //if (orders.Contains(order))
        //{
        //    dbContext.Remove<Dic<string, object>>(order);

        //    // For demo purposes only
        //    orders.Remove(order);

        //    // For production
        //    //dbContext.SaveChanges();

        //    await ordersGrid.Reload();
        //}
        //else
        //{
        //    ordersGrid.CancelEditRow(order);
        //}
    }

    //Dic<string, object> orderToInsert;

    async Task InsertRow()
    {
        //orderToInsert = new Dic<string, object>();
        //await ordersGrid.InsertRow(orderToInsert);
    }

    void OnCreateRow(Dic<string, string> order)
    {
        //dbContext.Add(order);

        //// For demo purposes only
        //order.Customer = dbContext.Customers.Find(order.CustomerID);
        //order.Employee = dbContext.Employees.Find(order.EmployeeID);

        // For production
        //dbContext.SaveChanges();
    }
 
 

	[Parameter]
	public Boolean ModoScrollInfinito { get; set; } = false;

	[Parameter]
	public Boolean SelectorDeColumnasVisibles { get; set; } = true;


	 
	[Parameter]
	public string Titulo { get; set; } = "Título";
	
	[Parameter]
	public string Comentario { get; set; } = "xx";


	[Parameter]
	public DinaNETCore.APID.APID_InformeC DinaupInformeRespuesta { get; set; }

		
	[Parameter]
	public string URL_Ver { get; set; } = "";

	
	[Parameter]
	public string URL_Editar { get; set; } = "";

	
	[Parameter]
	public bool PuedeEliminar { get; set; } = false;




}